import customtkinter as ctk
from ui.sidebar import Sidebar
from ui.header import Header
from ui.forms import AttackForm
from ui.table import AttackTable
from ui.dashboard import Dashboard
from ui.settings import Settings
from api.client import DDOSApiClient
from utils.helpers import generate_id, get_current_timestamp
import threading
from tkinter import messagebox
from typing import List, Dict, Any

class DDoSAttackApp:
    def __init__(self):
        self.window = ctk.CTk()
        self.window.title("DDoS Attack Manager - Security Dashboard")
        self.window.geometry("1600x900")
        self.window.minsize(1400, 800)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
        self.api_client = DDOSApiClient()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.initialize_database()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
        self.attacks = self.load_attacks_from_server()

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            "primary": "#2b5876",
            "secondary": "#4e4376",
            "accent": "#ff6b6b",
            "success": "#4ecdc4",
            "warning": "#ffd166",
            "danger": "#ff6b6b",
            "dark_bg": "#1a1a2e",
            "card_bg": "#16213e",
            "text_light": "#ffffff",
            "text_muted": "#b0b0b0"
        }

        # Enum –∑–Ω–∞—á–µ–Ω–∏—è
        self.frequency_levels = ["low", "medium", "high", "very_high", "continuous"]
        self.danger_levels = ["low", "medium", "high", "critical"]
        self.attack_types = ["amplification", "protocol", "application", "volumetric", "fragmentation"]
        self.protocols = ["tcp", "udp", "dns", "http", "https", "icmp"]

        self.current_edit_id = None
        self.setup_ui()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.check_database_connection()

    def load_attacks_from_server(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            return self.api_client.get_all_attacks()
        except Exception as e:
            self.show_error(f"Failed to load attacks from server: {e}")
            return []

    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""

        def check():
            try:
                status = self.api_client.check_database_status()
                print(f"‚úÖ Database status: {status}")
            except Exception as e:
                self.show_error(f"‚ùå Database connection failed: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        thread = threading.Thread(target=check)
        thread.daemon = True
        thread.start()

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        main_frame = ctk.CTkFrame(self.window, fg_color=self.colors["dark_bg"])
        main_frame.pack(fill="both", expand=True, padx=0, pady=0)

        # –°–æ–∑–¥–∞–Ω–∏–µ layout —Å sidebar –∏ main content
        self.create_layout(main_frame)

    def create_layout(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout —Å sidebar"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = ctk.CTkFrame(parent, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=0, pady=0)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
        self.sidebar = Sidebar(container, self)
        self.header = Header(container, self)
        self.content_frame = self.create_content_frame(container)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_dashboard()

    def create_content_frame(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        content_frame = ctk.CTkFrame(parent, fg_color="transparent")
        content_frame.pack(side="left", fill="both", expand=True, padx=5, pady=5)
        return content_frame

    def clear_content(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def show_attack_form(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–∞–∫–∏"""
        self.clear_content()
        self.header.set_title("Create New Attack")
        AttackForm(self.content_frame, self)

    def show_attacks_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ç–∞–∫"""
        self.clear_content()
        self.header.set_title("All Attacks")
        AttackTable(self.content_frame, self)

    def show_dashboard(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥"""
        self.clear_content()
        self.header.set_title("Attack Dashboard")
        Dashboard(self.content_frame, self)

    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.clear_content()
        self.header.set_title("Settings")
        Settings(self.content_frame, self)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ API)"""
        # –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —á–µ—Ä–µ–∑ API
        pass

    def refresh_attacks(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.attacks = self.api_client.get_all_attacks()
            self.update_stats()
        except Exception as e:
            self.show_error(f"Failed to refresh attacks: {e}")

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
        self.sidebar.update_stats()
        self.header.update_stats()

    def show_error(self, message):
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        messagebox.showerror("Error", message)

    def show_success(self, message):
        """–ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞"""
        messagebox.showinfo("Success", message)

    # –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    def get_current_timestamp(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        from utils.helpers import get_current_timestamp
        return get_current_timestamp()

    def generate_id(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID"""
        from utils.helpers import generate_id
        return generate_id()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window.mainloop()

    def initialize_database(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ë–î
            status = self.api_client.check_database_status()
            if not status.get('data', {}).get('tablesExist', False):
                print("üîÑ Tables don't exist. Initializing database...")
                result = self.api_client.initialize_database()
                print("‚úÖ Database initialized successfully")
            else:
                print("‚úÖ Database is ready")
        except Exception as e:
            print(f"‚ùå Database initialization failed: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.show_error(f"Database initialization failed: {e}")