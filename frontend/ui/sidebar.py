import customtkinter as ctk
from datetime import datetime

class Sidebar:
    def __init__(self, parent, app):
        self.app = app
        self.setup_ui(parent)

    def setup_ui(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        sidebar = ctk.CTkFrame(parent, width=280, fg_color=self.app.colors["card_bg"],
                               corner_radius=0)
        sidebar.pack(side="left", fill="y", padx=(0, 5), pady=0)
        sidebar.pack_propagate(False)

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_logo_section(sidebar)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.create_navigation_section(sidebar)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_stats_section(sidebar)

    def create_logo_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º"""
        logo_frame = ctk.CTkFrame(parent, fg_color="transparent")
        logo_frame.pack(fill="x", padx=20, pady=30)

        ctk.CTkLabel(logo_frame, text="üõ°Ô∏è", font=ctk.CTkFont(size=28)).pack()
        ctk.CTkLabel(logo_frame, text="DDoS Manager",
                     font=ctk.CTkFont(size=20, weight="bold"),
                     text_color=self.app.colors["text_light"]).pack(pady=(5, 0))
        ctk.CTkLabel(logo_frame, text="Security Dashboard",
                     font=ctk.CTkFont(size=12),
                     text_color=self.app.colors["text_muted"]).pack()

    def create_navigation_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        nav_frame = ctk.CTkFrame(parent, fg_color="transparent")
        nav_frame.pack(fill="x", padx=15, pady=20)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ", self.app.show_main_window),
            ("üìä –î–∞—à–±–æ—Ä–¥", self.app.show_dashboard),
            ("üìã –í—Å–µ –∞—Ç–∞–∫–∏", self.app.show_attacks_list),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.app.show_settings)
        ]

        for text, command in nav_buttons:
            btn = ctk.CTkButton(nav_frame, text=text, command=command,
                                fg_color="transparent", hover_color="#2a2a4a",
                                anchor="w", font=ctk.CTkFont(size=14))
            btn.pack(fill="x", pady=5)

    def create_stats_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = ctk.CTkFrame(parent, fg_color="#2a2a4a")
        stats_frame.pack(fill="x", padx=15, pady=20)

        ctk.CTkLabel(stats_frame, text="–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))

        self.stats_label = ctk.CTkLabel(stats_frame, text="", justify="left",
                                        font=ctk.CTkFont(size=12))
        self.stats_label.pack(anchor="w", pady=(0, 10))

        self.update_stats()

    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
        try:
            if not hasattr(self.app, 'attacks') or not isinstance(self.app.attacks, list):
                stats_text = "–í—Å–µ–≥–æ –∞—Ç–∞–∫: 0\n–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: 0\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: 0\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: " + datetime.now().strftime("%H:%M")
                self.stats_label.configure(text=stats_text)
                return

            total_attacks = len(self.app.attacks)

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç critical –∞—Ç–∞–∫
            critical_attacks = 0
            active_attacks = 0
            high_freq_attacks = 0

            for attack in self.app.attacks:
                if isinstance(attack, dict):
                    if attack.get("danger") == "critical":
                        critical_attacks += 1
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ status, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
                    if attack.get("status") == "active":
                        active_attacks += 1
                    elif "status" not in attack:
                        active_attacks += 1  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π

                    # –ü–æ–¥—Å—á–µ—Ç high frequency –∞—Ç–∞–∫
                    if attack.get("frequency") in ["high", "very_high", "continuous"]:
                        high_freq_attacks += 1

            current_time = datetime.now().strftime("%H:%M")
            stats_text = f"""–í—Å–µ–≥–æ –∞—Ç–∞–∫: {total_attacks}
–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: {critical_attacks}
–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_attacks}
–í—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã: {high_freq_attacks}
–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"""

            self.stats_label.configure(text=stats_text)

        except Exception as e:
            print(f"Error updating sidebar stats: {e}")
            current_time = datetime.now().strftime("%H:%M")
            stats_text = f"""–í—Å–µ–≥–æ –∞—Ç–∞–∫: –û—à–∏–±–∫–∞
–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö: –û—à–∏–±–∫–∞
–ê–∫—Ç–∏–≤–Ω—ã—Ö: –û—à–∏–±–∫–∞
–í—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã: –û—à–∏–±–∫–∞
–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"""
            self.stats_label.configure(text=stats_text)