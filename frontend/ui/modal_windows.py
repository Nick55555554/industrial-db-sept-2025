import customtkinter as ctk
from tkinter import ttk
from typing import List, Dict, Any, Optional
import threading
from tkinter import messagebox
import re


class ModalWindow:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"""

    def __init__(self, parent, title: str, width: int = 600, height: int = 500):
        self.parent = parent
        self.title = title

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.root = self.get_root_window(parent)

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.modal = ctk.CTkToplevel(self.root)
        self.modal.title(title)
        self.modal.geometry(f"{width}x{height}")
        self.modal.resizable(False, False)
        self.modal.minsize(width, height)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.modal.transient(self.root)
        self.modal.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window(width, height)

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        self.root.attributes('-disabled', True)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.modal.protocol("WM_DELETE_WINDOW", self.on_close)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ctk.CTkFrame(self.modal)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

    def get_root_window(self, widget):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ –∏–∑ –≤–∏–¥–∂–µ—Ç–∞"""
        current = widget
        while hasattr(current, 'master') and current.master:
            current = current.master
        return current

    def center_window(self, width, height):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        self.modal.update_idletasks()
        x = (self.modal.winfo_screenwidth() // 2) - (width // 2)
        y = (self.modal.winfo_screenheight() // 2) - (height // 2)
        self.modal.geometry(f'{width}x{height}+{x}+{y}')

    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.root.attributes('-disabled', False)
        self.modal.destroy()


class AddAttackModal(ModalWindow):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏"""

    def __init__(self, parent, app):
        super().__init__(parent, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞—Ç–∞–∫—É", 700, 650)
        self.app = app
        self.target_fields = []
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.main_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é DDoS –∞—Ç–∞–∫—É",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        title_label.pack(pady=(0, 20))

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        self.create_scrollable_form()

    def create_scrollable_form(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–π —Ñ–æ—Ä–º—ã"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        container = ctk.CTkFrame(self.main_frame)
        container.pack(fill="both", expand=True, pady=(0, 15))

        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º
        self.scrollable_frame = ctk.CTkScrollableFrame(container, height=450)
        self.scrollable_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏–∏ —Ñ–æ—Ä–º—ã
        self.create_basic_info_section()
        self.create_network_info_section()
        self.create_targets_section()
        self.create_mitigation_section()

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.create_action_buttons()

    def create_basic_info_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        basic_frame = ctk.CTkFrame(self.scrollable_frame)
        basic_frame.pack(fill="x", pady=10, padx=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            basic_frame,
            text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        section_label.pack(anchor="w", pady=(10, 15))

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏
        name_frame = ctk.CTkFrame(basic_frame, fg_color="transparent")
        name_frame.pack(fill="x", pady=5, padx=10)

        ctk.CTkLabel(name_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏ *").pack(anchor="w")
        self.name_entry = ctk.CTkEntry(
            name_frame,
            placeholder_text="–ù–∞–ø—Ä–∏–º–µ—Ä: SYN Flood Attack",
            height=35
        )
        self.name_entry.pack(fill="x", pady=(5, 10))

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏ –≤ —Å–µ—Ç–∫–µ
        params_frame = ctk.CTkFrame(basic_frame, fg_color="transparent")
        params_frame.pack(fill="x", pady=5, padx=10)

        # –¢–∏–ø –∞—Ç–∞–∫–∏
        ctk.CTkLabel(params_frame, text="–¢–∏–ø –∞—Ç–∞–∫–∏ *").grid(row=0, column=0, sticky="w", padx=(0, 10), pady=5)
        self.type_combo = ctk.CTkComboBox(
            params_frame,
            values=self.app.attack_types,
            width=200,
            height=35
        )
        self.type_combo.grid(row=0, column=1, sticky="w", pady=5)
        self.type_combo.set("volumetric")

        # –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ctk.CTkLabel(params_frame, text="–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ *").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=5)
        self.danger_combo = ctk.CTkComboBox(
            params_frame,
            values=self.app.danger_levels,
            width=200,
            height=35
        )
        self.danger_combo.grid(row=1, column=1, sticky="w", pady=5)
        self.danger_combo.set("medium")

        # –ß–∞—Å—Ç–æ—Ç–∞
        ctk.CTkLabel(params_frame, text="–ß–∞—Å—Ç–æ—Ç–∞ –∞—Ç–∞–∫–∏ *").grid(row=2, column=0, sticky="w", padx=(0, 10), pady=5)
        self.frequency_combo = ctk.CTkComboBox(
            params_frame,
            values=self.app.frequency_levels,
            width=200,
            height=35
        )
        self.frequency_combo.grid(row=2, column=1, sticky="w", pady=5)
        self.frequency_combo.set("medium")

    def create_network_info_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        network_frame = ctk.CTkFrame(self.scrollable_frame)
        network_frame.pack(fill="x", pady=10, padx=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            network_frame,
            text="üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        section_label.pack(anchor="w", pady=(10, 15))

        # IP –∞–¥—Ä–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        ips_frame = ctk.CTkFrame(network_frame, fg_color="transparent")
        ips_frame.pack(fill="x", pady=5, padx=10)

        ctk.CTkLabel(ips_frame, text="IP –∞–¥—Ä–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ *").pack(anchor="w")
        ctk.CTkLabel(
            ips_frame,
            text="–ü–æ –æ–¥–Ω–æ–º—É IP –Ω–∞ —Å—Ç—Ä–æ–∫—É. –ü—Ä–∏–º–µ—Ä:\n192.168.1.1\n10.0.0.5",
            text_color="gray",
            font=ctk.CTkFont(size=12)
        ).pack(anchor="w")

        self.source_ips_text = ctk.CTkTextbox(ips_frame, height=80)
        self.source_ips_text.pack(fill="x", pady=(5, 10))

        # –ü–æ—Ä—Ç—ã
        ports_frame = ctk.CTkFrame(network_frame, fg_color="transparent")
        ports_frame.pack(fill="x", pady=5, padx=10)

        ctk.CTkLabel(ports_frame, text="–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ—Ä—Ç—ã").pack(anchor="w")
        ctk.CTkLabel(
            ports_frame,
            text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: 80, 443, 22, 8080",
            text_color="gray",
            font=ctk.CTkFont(size=12)
        ).pack(anchor="w")

        self.ports_entry = ctk.CTkEntry(
            ports_frame,
            placeholder_text="80, 443, 22",
            height=35
        )
        self.ports_entry.pack(fill="x", pady=(5, 5))

    def create_targets_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ü–µ–ª–µ–π"""
        targets_frame = ctk.CTkFrame(self.scrollable_frame)
        targets_frame.pack(fill="x", pady=10, padx=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            targets_frame,
            text="üéØ –¶–µ–ª–∏ –∞—Ç–∞–∫–∏",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        section_label.pack(anchor="w", pady=(10, 15))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π
        self.targets_container = ctk.CTkFrame(targets_frame, fg_color="transparent")
        self.targets_container.pack(fill="x", pady=5, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
        add_target_btn = ctk.CTkButton(
            targets_frame,
            text="+ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å",
            command=self.add_target_field,
            fg_color=self.app.colors["success"],
            height=35
        )
        add_target_btn.pack(pady=10)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Ü–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.add_target_field()

    def add_target_field(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–ª–∏"""
        target_frame = ctk.CTkFrame(self.targets_container, fg_color="transparent")
        target_frame.pack(fill="x", pady=5)

        # –ù–æ–º–µ—Ä —Ü–µ–ª–∏
        target_number = len(self.target_fields) + 1
        ctk.CTkLabel(target_frame, text=f"–¶–µ–ª—å #{target_number} *", font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        # IP/URL
        ip_frame = ctk.CTkFrame(target_frame, fg_color="transparent")
        ip_frame.pack(fill="x", pady=5)

        ctk.CTkLabel(ip_frame, text="IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω:", width=120).pack(side="left")
        ip_entry = ctk.CTkEntry(
            ip_frame,
            placeholder_text="192.168.1.1 –∏–ª–∏ example.com",
            height=35
        )
        ip_entry.pack(side="left", fill="x", expand=True, padx=(10, 10))

        # Protocol
        ctk.CTkLabel(ip_frame, text="–ü—Ä–æ—Ç–æ–∫–æ–ª:", width=80).pack(side="left")
        protocol_combo = ctk.CTkComboBox(
            ip_frame,
            values=self.app.protocols,
            width=120,
            height=35
        )
        protocol_combo.pack(side="left", padx=(10, 10))
        protocol_combo.set("tcp")

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–ª–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π)
        if len(self.target_fields) > 0:
            remove_btn = ctk.CTkButton(
                ip_frame,
                text="‚úï",
                width=35,
                height=35,
                fg_color=self.app.colors["danger"],
                command=lambda f=target_frame: self.remove_target_field(f)
            )
            remove_btn.pack(side="left")

        self.target_fields.append({
            'frame': target_frame,
            'ip_entry': ip_entry,
            'protocol_combo': protocol_combo
        })

    def remove_target_field(self, target_frame):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è —Ü–µ–ª–∏"""
        for field in self.target_fields:
            if field['frame'] == target_frame:
                field['frame'].destroy()
                self.target_fields.remove(field)
                self.update_target_numbers()
                break

    def update_target_numbers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ü–µ–ª–µ–π"""
        for i, field in enumerate(self.target_fields):
            # –ù–∞—Ö–æ–¥–∏–º label —Å –Ω–æ–º–µ—Ä–æ–º —Ü–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            for widget in field['frame'].winfo_children():
                if isinstance(widget, ctk.CTkLabel) and "–¶–µ–ª—å #" in widget.cget("text"):
                    widget.configure(text=f"–¶–µ–ª—å #{i + 1} *")
                    break

    def create_mitigation_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—â–∏—Ç—ã"""
        mitigation_frame = ctk.CTkFrame(self.scrollable_frame)
        mitigation_frame.pack(fill="x", pady=10, padx=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_label = ctk.CTkLabel(
            mitigation_frame,
            text="üõ°Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—â–∏—Ç—ã",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        section_label.pack(anchor="w", pady=(10, 15))

        mitigation_content = ctk.CTkFrame(mitigation_frame, fg_color="transparent")
        mitigation_content.pack(fill="x", pady=5, padx=10)

        ctk.CTkLabel(mitigation_content, text="–ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):").pack(anchor="w")
        ctk.CTkLabel(
            mitigation_content,
            text="–ü—Ä–∏–º–µ—Ä:\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤\n–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞",
            text_color="gray",
            font=ctk.CTkFont(size=12)
        ).pack(anchor="w")

        self.mitigation_text = ctk.CTkTextbox(mitigation_content, height=100)
        self.mitigation_text.pack(fill="x", pady=(5, 5))
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_mitigation = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WAF"
        self.mitigation_text.insert("1.0", default_mitigation)

    def create_action_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        buttons_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=10)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        info_label = ctk.CTkLabel(
            buttons_frame,
            text="* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
            text_color="gray",
            font=ctk.CTkFont(size=12)
        )
        info_label.pack(side="left")

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        action_buttons_frame.pack(side="right")

        ctk.CTkButton(
            action_buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.on_close,
            height=35,
            width=100
        ).pack(side="right", padx=(10, 0))

        ctk.CTkButton(
            action_buttons_frame,
            text="–°–æ–∑–¥–∞—Ç—å –∞—Ç–∞–∫—É",
            command=self.create_attack,
            fg_color=self.app.colors["success"],
            height=35,
            width=120
        ).pack(side="right")

    def get_targets_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–ª—è—Ö –∏–∑ —Ñ–æ—Ä–º—ã"""
        targets = []
        for field in self.target_fields:
            ip = field['ip_entry'].get().strip()
            protocol = field['protocol_combo'].get()
            if ip:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ –¥–æ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
                if self.is_valid_ip(ip):
                    target_data = {
                        "ip_address": ip,
                        "protocol": protocol,
                        "status": "active"
                    }
                elif self.is_valid_domain(ip):
                    target_data = {
                        "domain": ip,
                        "protocol": protocol,
                        "status": "active"
                    }
                else:
                    # –ï—Å–ª–∏ –Ω–µ IP –∏ –Ω–µ –¥–æ–º–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ IP
                    target_data = {
                        "ip_address": ip,
                        "protocol": protocol,
                        "status": "active"
                    }
                targets.append(target_data)
        return targets

    def is_valid_ip(self, ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
        ip_pattern = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
        if ip_pattern.match(ip):
            parts = ip.split('.')
            for part in parts:
                if not 0 <= int(part) <= 255:
                    return False
            return True
        return False

    def is_valid_domain(self, domain):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        domain_pattern = re.compile(
            r'^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$'
        )
        return domain_pattern.match(domain) is not None

    def validate_form(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        name = self.name_entry.get().strip()
        if not name:
            errors.append("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_ips = [ip.strip() for ip in self.source_ips_text.get("1.0", "end-1c").split("\n") if ip.strip()]
        if not source_ips:
            errors.append("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω IP –∞–¥—Ä–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        else:
            for ip in source_ips:
                if not self.is_valid_ip(ip):
                    errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞: {ip}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π
        targets = self.get_targets_data()
        if not targets:
            errors.append("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        ports_text = self.ports_entry.get().strip()
        if ports_text:
            ports = [port.strip() for port in ports_text.split(",") if port.strip()]
            for port in ports:
                if not port.isdigit() or not (1 <= int(port) <= 65535):
                    errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: {port}")

        return errors

    def create_attack(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        errors = self.validate_form()
        if errors:
            error_message = "\n".join(f"‚Ä¢ {error}" for error in errors)
            messagebox.showerror("–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ", f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n\n{error_message}")
            return

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        name = self.name_entry.get().strip()
        source_ips = [ip.strip() for ip in self.source_ips_text.get("1.0", "end-1c").split("\n") if ip.strip()]
        targets = self.get_targets_data()

        ports_text = self.ports_entry.get().strip()
        ports = []
        if ports_text:
            ports = [int(port.strip()) for port in ports_text.split(",") if port.strip().isdigit()]

        mitigation_strategies = [strat.strip() for strat in self.mitigation_text.get("1.0", "end-1c").split("\n") if
                                 strat.strip()]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        attack_data = {
            "name": name,
            "frequency": self.frequency_combo.get(),
            "danger": self.danger_combo.get(),
            "attack_type": self.type_combo.get(),
            "source_ips": source_ips,
            "affected_ports": ports,
            "mitigation_strategies": mitigation_strategies,
            "targets": targets
        }

        self.app.logger.log_info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏: {name}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def create_thread():
            try:
                result = self.app.api_client.create_attack(attack_data)
                self.app.logger.log_database_operation("CREATE_ATTACK", True)

                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.modal.after(0, lambda: self.on_creation_success(name))

            except Exception as e:
                self.app.logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–∞–∫–∏: {e}")
                self.app.logger.log_database_operation("CREATE_ATTACK", False)
                self.modal.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–∞–∫–∏: {e}"))

        thread = threading.Thread(target=create_thread)
        thread.daemon = True
        thread.start()

    def on_creation_success(self, attack_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–∞–∫–∏"""
        self.app.refresh_attacks()
        self.app.show_success(f"–ê—Ç–∞–∫–∞ '{attack_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        self.on_close()


class DataViewModal(ModalWindow):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""

    def __init__(self, parent, app):
        super().__init__(parent, "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", 900, 600)
        self.app = app
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.main_frame,
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∞—Ç–∞–∫",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=(0, 15))

        # –°–µ–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.create_filters_section()

        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        self.create_table_section()

    def create_filters_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filters_frame = ctk.CTkFrame(self.main_frame)
        filters_frame.pack(fill="x", pady=(0, 10))

        ctk.CTkLabel(filters_frame, text="–§–∏–ª—å—Ç—Ä—ã", font=("Arial", 12, "bold")).pack(anchor="w", pady=8, padx=10)

        # –°—Ç—Ä–æ–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters_row = ctk.CTkFrame(filters_frame, fg_color="transparent")
        filters_row.pack(fill="x", padx=10, pady=(0, 8))

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞—Ç–∞–∫–∏
        ctk.CTkLabel(filters_row, text="–¢–∏–ø –∞—Ç–∞–∫–∏:").pack(side="left", padx=(0, 5))
        self.type_filter = ctk.CTkComboBox(filters_row, values=["–í—Å–µ"] + self.app.attack_types, width=140)
        self.type_filter.pack(side="left", padx=(0, 15))
        self.type_filter.set("–í—Å–µ")

        # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ctk.CTkLabel(filters_row, text="–û–ø–∞—Å–Ω–æ—Å—Ç—å:").pack(side="left", padx=(0, 5))
        self.danger_filter = ctk.CTkComboBox(filters_row, values=["–í—Å–µ"] + self.app.danger_levels, width=140)
        self.danger_filter.pack(side="left", padx=(0, 15))
        self.danger_filter.set("–í—Å–µ")

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        ctk.CTkButton(
            filters_row,
            text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
            command=self.apply_filters,
            width=120
        ).pack(side="left")

    def create_table_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        table_frame = ctk.CTkFrame(self.main_frame)
        table_frame.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º Treeview
        columns = ("name", "type", "danger", "frequency", "sources", "targets", "date")
        self.tree = ttk.Treeview(
            table_frame,
            columns=columns,
            show="headings",
            height=15
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("name", "–ù–∞–∑–≤–∞–Ω–∏–µ", 150),
            ("type", "–¢–∏–ø", 120),
            ("danger", "–û–ø–∞—Å–Ω–æ—Å—Ç—å", 100),
            ("frequency", "–ß–∞—Å—Ç–æ—Ç–∞", 100),
            ("sources", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏", 120),
            ("targets", "–¶–µ–ª–∏", 80),
            ("date", "–î–∞—Ç–∞", 100)
        ]

        for col_id, heading, width in columns_config:
            self.tree.heading(col_id, text=heading)
            self.tree.column(col_id, width=width)

        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)

        # –£–ø–∞–∫–æ–≤–∫–∞
        self.tree.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        scrollbar.pack(side="right", fill="y", pady=10)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        self.load_data()

    def load_data(self, filtered_attacks=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—Å–µ –∞—Ç–∞–∫–∏
        attacks = filtered_attacks if filtered_attacks is not None else self.app.attacks

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for attack in attacks:
            if isinstance(attack, dict):
                sources = attack.get("source_ips", [])
                sources_preview = f"{len(sources)} IP" if len(sources) <= 3 else f"{len(sources)} IP"

                self.tree.insert("", "end", values=(
                    attack.get("name", ""),
                    attack.get("attack_type", ""),
                    attack.get("danger", ""),
                    attack.get("frequency", ""),
                    sources_preview,
                    len(attack.get("targets", [])),
                    attack.get("created_at", "")[:10] if attack.get("created_at") else ""
                ))

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            type_filter = self.type_filter.get()
            danger_filter = self.danger_filter.get()

            filtered_attacks = self.app.attacks.copy()

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞—Ç–∞–∫–∏
            if type_filter != "–í—Å–µ":
                filtered_attacks = [a for a in filtered_attacks
                                    if a.get("attack_type") == type_filter]

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if danger_filter != "–í—Å–µ":
                filtered_attacks = [a for a in filtered_attacks
                                    if a.get("danger") == danger_filter]

            self.load_data(filtered_attacks)
            self.app.logger.log_info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: —Ç–∏–ø={type_filter}, –æ–ø–∞—Å–Ω–æ—Å—Ç—å={danger_filter}")

        except Exception as e:
            self.app.logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")